#!/usr/bin/env sh

# Configuration script ; copied from musl
# Before modification, it was shipped with the following license:
#----------------------------------------------------------------------
#Copyright Â© 2005-2020 Rich Felker, et al.
#
#Permission is hereby granted, free of charge, to any person obtaining
#a copy of this software and associated documentation files (the
#"Software"), to deal in the Software without restriction, including
#without limitation the rights to use, copy, modify, merge, publish,
#distribute, sublicense, and/or sell copies of the Software, and to
#permit persons to whom the Software is furnished to do so, subject to
#the following conditions:
#
#The above copyright notice and this permission notice shall be
#included in all copies or substantial portions of the Software.
#
#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
#EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
#MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
#CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
#TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
#SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#----------------------------------------------------------------------

# Default configuration

debug=no
warnings=yes
sanitize=address,leak,undefined

usage () {
cat <<EOF
Usage: $0 [OPTION]... [VAR=VALUE]

To assign environment variables (e.g., CC, CFLAGS...), specify them as
VAR=VALUE.  See below for descriptions of some of the useful variables.

Defaults for the options are specified in brackets.

Options:
  --sanitize=<check>      build with sanitize check [sanitize=$sanitize]
  --enable-debug | -d     build with debugging information [debug=$debug]
  --enable-warnings | -w  build with recommended warnings flags [warnings=$warnings]

Some influential environment variables:
  CC                      C compiler command [detected]
  CFLAGS                  C compiler flags [-Os -pipe ...]
  CROSS_COMPILE           prefix for cross compiler and tools [none]

Use these variables to override the choices made by configure.
EOF
exit 0
}

# Helper functions

quote () {
tr '\n' ' ' <<EOF | grep '^[-[:alnum:]_=,./:]* $' >/dev/null 2>&1 && { echo "$1" ; return 0 ; }
$1
EOF
printf %s\\n "$1" | sed -e "s/'/'\\\\''/g" -e "1s/^/'/" -e "\$s/\$/'/" -e "s#^'\([-[:alnum:]_,./:]*\)=\(.*\)\$#\1='\2#"
}
echo () { printf "%s\n" "$*" ; }
fail () { echo "$*" ; exit 1 ; }
fnmatch () { eval "case \"\$2\" in $1) return 0 ;; *) return 1 ;; esac" ; }
cmdexists () { command -v "$1" >/dev/null 2>&1 ; }
trycc () { test -z "$CC" && cmdexists "$1" && CC=$1 ; }

stripdir () {
while eval "fnmatch '*/' \"\${$1}\"" ; do eval "$1=\${$1%/}" ; done
}

# The 'try*flag' functions use a temporary file inclusing a 'main' symbol,
# to allow complete build+link. If a library dependency is missing, such
# as libasan if GCC is used with -fsanitize, then the link may fail.

tryflag () {
printf "checking whether compiler accepts %s... " "$2"
echo "int main;" > "$tmpc"
if $CC $CFLAGS_TRY $2 -o /dev/null "$tmpc" >/dev/null 2>&1 ; then
printf "yes\n"
eval "$1=\"\${$1} \$2\""
eval "$1=\${$1# }"
return 0
else
printf "no\n"
return 1
fi
}

tryldflag () {
printf "checking whether linker accepts %s... " "$2"
echo "int main;" > "$tmpc"
if $CC $LDFLAGS_TRY -nostdlib -shared $2 -o /dev/null "$tmpc" >/dev/null 2>&1 ; then
printf "yes\n"
eval "$1=\"\${$1} \$2\""
eval "$1=\${$1# }"
return 0
else
printf "no\n"
return 1
fi
}

# Beginning of actual script

for arg ; do
case "$arg" in
--help|-h) USAGE=y ;;
--sanitize=*) sanitize=${arg#*=} ;;
--enable-debug|--debug=yes|-d) debug=yes ;;
--disable-debug|--debug=no) debug=no ;;
--enable-warnings|--warnings=yes|-w) warnings=yes ;;
--disable-warnings|--warnings=no) warnings=no ;;
AR=*) AR=${arg#*=} ;;
CC=*) CC=${arg#*=} ;;
CFLAGS=*) CFLAGS=${arg#*=} ;;
LDFLAGS=*) LDFLAGS=${arg#*=} ;;
CROSS_COMPILE=*) CROSS_COMPILE=${arg#*=} ;;
*|-* ) echo "$0: unknown option $arg"; USAGE=y ;;
esac
done

[ "$USAGE" ] && usage

#
# Get a temp filename we can use
#
i=0
set -C
while : ; do
    i=$((i+1))
    tmpc="./conf$$-$PPID-$i.c"
    : 2>/dev/null > "$tmpc" && break
    test "$i" -gt 50 && fail "$0: cannot create temporary file $tmpc"
done
set +C
trap 'rm "$tmpc"' EXIT INT QUIT TERM HUP

#
# Find a C compiler to use
#
printf "checking for C compiler... "
trycc "${CROSS_COMPILE}clang"
trycc "${CROSS_COMPILE}gcc"
trycc "${CROSS_COMPILE}cc"
printf "%s\n" "$CC"
test -n "$CC" || { echo "$0: cannot find a C compiler" ; exit 1 ; }

printf "checking whether C compiler works... "
echo "typedef int x;" > "$tmpc"
if output="$($CC -c -o /dev/null "$tmpc" 2>&1)" ; then
printf "yes\n"
else
printf "no; compiler output follows:\n%s\n" "$output"
exit 1
fi


CFLAGS_AUTO=""
LDFLAGS_AUTO=""

#
# Figure out options to force errors on unknown flags.
#
tryflag   CFLAGS_TRY  -Werror=unknown-warning-option
tryflag   CFLAGS_TRY  -Werror=unused-command-line-argument
tryflag   CFLAGS_TRY  -Werror=ignored-optimization-argument
tryldflag LDFLAGS_TRY -Werror=unknown-warning-option
tryldflag LDFLAGS_TRY -Werror=unused-command-line-argument

#
# Enable debugging if requested.
#
test "x$debug" = xyes && CFLAGS_AUTO="-O0"

tryflag CFLAGS_AUTO -g3
tryflag CFLAGS_AUTO -fno-omit-frame-pointer
tryflag CFLAGS_AUTO -mno-omit-leaf-frame-pointer

#
# Possibly add a -O option to CFLAGS
#
printf "checking for optimization settings... "
if fnmatch '-O*|*\ -O*' "$CFLAGS_AUTO $CFLAGS" ; then
printf "using provided CFLAGS\n"
else
printf "using defaults\n" ; tryflag CFLAGS_AUTO -O2
fi

#
# Even with -std=c99, gcc accepts some constructs which are constraint
# violations. We want to treat these as errors regardless of whether
# other purely stylistic warnings are enabled -- especially implicit
# function declarations, which are a dangerous programming error.
#
tryflag CFLAGS_AUTO -Werror=implicit-function-declaration
tryflag CFLAGS_AUTO -Werror=implicit-int
tryflag CFLAGS_AUTO -Werror=pointer-sign
tryflag CFLAGS_AUTO -Werror=pointer-arith

if test "x$warnings" = xyes ; then
tryflag CFLAGS_AUTO -Werror
tryflag CFLAGS_AUTO -Wall
tryflag CFLAGS_AUTO -Wextra
tryflag CFLAGS_AUTO -Wno-parentheses
tryflag CFLAGS_AUTO -Wno-uninitialized
tryflag CFLAGS_AUTO -Wno-missing-braces
tryflag CFLAGS_AUTO -Wno-unused-value
tryflag CFLAGS_AUTO -Wno-unused-but-set-variable
tryflag CFLAGS_AUTO -Wno-unknown-pragmas
tryflag CFLAGS_AUTO -Wno-pointer-to-int-cast
fi

if test "x$sanitize" != x ; then
tryflag CFLAGS_AUTO -fsanitize=$sanitize
tryflag CFLAGS_AUTO -fsanitize-trap=all
echo "$CFLAGS_AUTO" | grep -q '\-fsanitize=*' || \
    printf "sanitizing requested but missing compiler support or dependencies (libasan?).\n"
fi

printf "creating config.mk... "

cmdline=$(quote "$0")
for i ; do cmdline="$cmdline $(quote "$i")" ; done

exec 3>&1 1>config.mk

cat << EOF
# This version of config.mk was generated by:
# $cmdline
# Any changes made here will be lost if configure is re-used

AR = ${AR:-\$(CROSS_COMPILE)ar}
RANLIB = ${RANLIB:-\$(CROSS_COMPILE)ranlib}
PREFIX = $PREFIX
BINDIR = $BINDIR
LIBDIR = $LIBDIR
INCLUDEDIR = $INCLUDEDIR
CC = $CC
CFLAGS = $CFLAGS
CFLAGS_AUTO = $CFLAGS_AUTO
LDFLAGS = $LDFLAGS
LDFLAGS_AUTO = $LDFLAGS_AUTO
CROSS_COMPILE = $CROSS_COMPILE

CONFIGURED = yes
EOF
exec 1>&3 3>&-

printf "done\n"
